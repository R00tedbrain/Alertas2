events {
    worker_connections 1024;
}

http {
    upstream whatsapp_backend {
        server whatsapp-api:4000;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=whatsapp:10m rate=5r/s;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    server {
        listen 80;
        server_name api.your-domain.com;

        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "strict-origin-when-cross-origin";

        # Health check endpoint (sin rate limiting)
        location /health {
            proxy_pass http://whatsapp_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Info endpoint (sin rate limiting)
        location /info {
            proxy_pass http://whatsapp_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # WhatsApp endpoints (rate limiting estricto)
        location /whatsapp/ {
            limit_req zone=whatsapp burst=10 nodelay;
            limit_req_status 429;

            proxy_pass http://whatsapp_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts específicos para WhatsApp
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Otras rutas de API (rate limiting moderado)
        location / {
            limit_req zone=api burst=20 nodelay;
            limit_req_status 429;

            proxy_pass http://whatsapp_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Manejo de errores
        error_page 429 @ratelimit;
        location @ratelimit {
            add_header Content-Type application/json always;
            return 429 '{"error":"Rate limit exceeded","message":"Too many requests. Please slow down.","retryAfter":60}';
        }

        error_page 502 503 504 @backend_error;
        location @backend_error {
            add_header Content-Type application/json always;
            return 503 '{"error":"Service unavailable","message":"Backend service is temporarily unavailable"}';
        }
    }

    # HTTPS configuration (para producción)
    server {
        listen 443 ssl http2;
        server_name api.your-domain.com;

        # SSL certificates (debes configurar estos archivos)
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;

        # SSL configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # Security headers para HTTPS
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "strict-origin-when-cross-origin";

        # Misma configuración de locations que HTTP
        location /health {
            proxy_pass http://whatsapp_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /info {
            proxy_pass http://whatsapp_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /whatsapp/ {
            limit_req zone=whatsapp burst=10 nodelay;
            limit_req_status 429;

            proxy_pass http://whatsapp_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        location / {
            limit_req zone=api burst=20 nodelay;
            limit_req_status 429;

            proxy_pass http://whatsapp_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        error_page 429 @ratelimit;
        location @ratelimit {
            add_header Content-Type application/json always;
            return 429 '{"error":"Rate limit exceeded","message":"Too many requests. Please slow down.","retryAfter":60}';
        }

        error_page 502 503 504 @backend_error;
        location @backend_error {
            add_header Content-Type application/json always;
            return 503 '{"error":"Service unavailable","message":"Backend service is temporarily unavailable"}';
        }
    }
} 